This document introduces RestMS, the RESTful Messaging Service.  RestMS provides web applications with enterprise-level messaging via an asynchronous RESTful interface that works over standard HTTP/HTTPS.  RestMS applications can interoperate with AMQP networks.

* Name: 7-RESTMS@wiki.amqp.org
* Version: draft/3
* Editor: Pieter Hintjens <ph@imatix.com>
* Contributors: Steve Vinoski <vinoski@ieee.org>, Brad Clements <bkc@murkworks.com>
* Resources: http://www.restms.org.

++ License

This document is licensed under the [http://wiki.amqp.org/main:intellectual-property-policy Intellectual Property Policy] of the wiki.amqp.org site.

++ Change process

This document is governed by the 1-COSS@wiki.amqp.org specification[((bibcite coss))]

++ Related documents

This document provides an overview of RestMS.  The specification is described in more detail by these separate documents:

* [[[spec:9 |RestMS-user]]] - guide to using RestMS in applications, for RestMS users.
* [[[spec:10|RestMS-base]]] - generic RESTful framework for documents and methods, for RestMS implementors.
* [[[spec:11|RestMS-core]]] - technical specifications of RestMS, for RestMS implementors.
* [[[spec:12|RestMS-amqp]]] - AMQP-to-RestMS interoperability specifications, for RestMS implementors.

++ RESTful messaging

> All REST interactions are stateless. That is, each request contains all of the information necessary for a connector to understand the request, independent of any requests that may have preceded it.[((bibcite rest))]

RestMS is a RESTful messaging service designed for web applications.

++ Why RestMS?

Before inventing a new protocol we need to look at what we are trying to achieve, and whether existing protocols can do the job.  What RestMS wants to do is provide the benefits of modern messaging to the widest possible audience.

* By "modern messaging" we mean portable, decoupled, abstract messaging of the style defined by AMQP[((bibcite amqp))].
* By the "widest possible audience" we mean web application developers.

While AMQP offers an attractive and flexible messaging architecture that has been adopted by many teams, it does not offer any interface to web application developers.  In theory the protocol can be accessed across any IP network but the public internet poses specific challenges such as:

* Secure authentication of remote users and encryption of message traffic.
* Firewalls, proxies, and routers which separate internal networks from the Internet.
* Scalability over a wide area network so that large numbers of users can be served.
* Reliability over unreliable public infrastructure where connections can come and go.

And any messaging technology faces the challenge of providing developers with a clean model and simple "stack" on which to program.  AMQP stacks are complex to make due to the binary encodings AMQP uses, and thus AMQP APIs are limited to specific languages and platforms, and there is little or no competition between AMQP APIs.

Fielding's "RESTful" pattern[((bibcite rest))] for web architectures is an alternative for complex "enterprise" techologies typfied by SOAP.  REST is comparable with XML/RPC but has cleaner semantics for state.  It can be understood as a way to implement a traditional "create/read/update/delete" data management approach over HTTP (or other indeed transports).

We thus see the combination of AMQP's architecture, and the RESTful approach, as a useful way to provide messaging to web application developers.

In practice, RestMS will usually act as a "front-end" to an existing AMQP network.  However it is coherent as a self-standing protocol implemented by self-standing servers.

The typical effort taken to implement a RestMS library - which provides developers with a set of classes to do RestMS work, such as creating feeds and pipes, and publishing and receiving messages - is one week.  Part of the RestMS project includes the development of reference libraries in a range of languages.

It is also possible for developers to use RestMS directly, without any intervening class library.  It is even possible to use RestMS interactively via TELNET.

++ Goals of this specification

The goals of the specification are:

* To be a formal specification for enterprise-level messaging across plain HTTP and HTTPS.
* To assure interoperability between implementations by being clear, precise, and orthogonal.
* To be fully compatible with IETF RFCs governing HTTP and related protocols.
* To be easy to use from any programming language, in any application, on any platform.
* To deliver the scalability and simplicity of the RESTful model.
* To implement an efficient asynchronous ("push") message delivery model.
* To be interoperable with AMQP.

++ Language

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119[((bibcite rfc2119))].

++ Terminolgy

These terms are introduced by, or have specific meaning, in this specification:

* Domain - a set of resources managed by one RestMS server or virtual host.
* Feed - a destination for messages published by applications.
* Pipe - a source of messages delivered to applications.
* Join - a relationship between a pipe and a feed.
* Message - a package of data consisting of an envelope and zero or more contents.
* Content - an opaque binary payload, with a MIME type and encoding.
* Asynclet - a resource that can be retrieved before it exists, resulting in a long poll.

These important terms are defined in other specifications:

* Resource - a server-held object that can be accessed across the network.
* Exchange (AMQP) - a destination for messages published by applications.
* Queue (AMQP) - a source of messages delivered to applications.
* Binding (AMQP) - a relationship between a queue and an exchange.
* Attribute (XML) - an XML element attribute.  Interchangeable with "property".

These terms are used with less formality:

* Subscriber - an application that receives data matching some requested criteria.
* Publisher - an application that publishes data, usually for subscribers.
* Reader - an application that receives data.
* Writer - an application that publishes data, usually to a reader.
* Service - an application that implements some named service.
* Long poll - a retrieval operation that can wait indefinitely.

++ References

[[bibliography]]
: amqp : "The Advanced Message Queueing Protocol" - [http://www.amqp.org amqp.org]
: rfc2119 : "Key words for use in RFCs to Indicate Requirement Levels" - [http://tools.ietf.org/html/rfc2119 ietf.org]
: coss : "Consensus Oriented Specification System" - [http://wiki.amqp.org/spec:1 wiki.amqp.org]
: rest : Roy Fielding, "Representational State Transfer (REST)" [http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm www.ics.uci.edu]
[[/bibliography]]
